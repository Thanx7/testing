
D:
cd D:\repo\reponame\

Chain:

The main tool you use to determine which files are in which state is the git status command
	git status

In order to begin tracking a new file, you use the command git add
	git add --all

git commit -m "version 2.4 (life cycle scheme is partly implemented)"
git push -u origin master


https://github.com/Thanx7/IssueTracker.git

git pull https://github.com/Thanx7/IssueTracker.git
git remote add origin https://github.com/Thanx7/IssueTracker.git
git remote add origin https://github.com/Thanx7/testing.git
git remote show origin

Do not use:
git clean -f -d

*****************
Delete all:
1. git add -u
2. git commit -m "Deleted files manually"
3. git push origin master --force


***
git config --global user.name Thanx7
git config --global user.email Aliaksandr_Doubeikovsky@epam.com

Using Sublime Text as your editor
git config --global core.editor "'C:\Program Files\Sublime Text 2\sublime_text.exe' -w"

Checking Your Settings:
git config --list

You can also check what Git thinks a specific key’s value is by typing git config {key}:
git config user.name
Scott Chacon

Getting Help
git help <verb>
git <verb> --help
man git-<verb>
For example, you can get the manpage help for the config command by running
git help config

git commit -a
Skipping the Staging Area
Providing the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part.

git rm
The git rm command does that and also removes the file from your working directory so you don’t see it as an untracked file next time around.

git rm -f
(if i deleted/modified the file manually before "git rm")
 If you modified the file and added it to the index already, you must force the removal with the -f option. This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from Git.

git rm --cached readme.txt
 Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. This is particularly useful if you forgot to add something to your .gitignore file and accidentally staged it, like a large log file or a bunch of .a compiled files. To do this, use the --cached option.

git mv README README.txt
*** optional lines ***
mv README README.txt
git rm README
git add README.txt
***
Moving Files
 Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with the mv command. The only real difference is that mv is one command instead of three — it’s a convenience function.
 More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.

git log --pretty=oneline
git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format:"%h %s" --graph

Undoing Things
 Unstaging a Staged File
git reset HEAD <file>...
 Unmodifying a Modified File
git checkout -- sample5.txt
(You should also realize that this is a dangerous command: any changes you made to that file are gone — you just copied another file over it.)

Showing Your Remotes
git remote
(You can also specify -v, which shows you the URL that Git has stored for the shortname to be expanded to:)
git remote -v

Fetching and Pulling from Your Remotes
If you clone a repository, the command automatically adds that remote repository under the name origin. So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It’s important to note that the fetch command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.

Pushing to Your Remotes
git push origin master

Inspecting a Remote
git remote show origin

Renaming Remotes
git remote rename oldBranchName newBranchName
Removing Remotes
git remote rm branch

Listing Your Tags
git tag
git tag -l "2014*"

Creating an annotated tag:
git tag -a v1.4 -m "my version 1.4"

git show v1.4

Signed Tags:
git tag -s v1.5 -m "my signed 1.5 tag"

Lightweight Tags
 To create a lightweight tag, don’t supply the -a, -s, or -m option:
git tag v1.4-lw

Tagging Later
git tag -a v1.2 -m "version 1.2" 14e7

Sharing Tags
 By default, the git push command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches — you can run git push origin [tagname]:
git push origin First_tag
 If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command. This will transfer all of your tags to the remote server that are not already there.
git push origin --tags

Git Aliases
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

git config --global alias.last "log -1 HEAD"
 This way, you can see the last commit easily:
git last



Git Branching
 Let’s say you create a new branch called testing. You do this with the git branch command:
git branch testing
 To switch to an existing branch, you run the git checkout command. Let’s switch to the new testing branch:
git checkout testing

 To create a branch and switch to it at the same time, you can run the git checkout command with the -b switch:
git checkout -b iss53
 Switched to a new branch 'iss53'

git checkout -b hotfix
git add --all
git commit -m "fixed the broken email address"

 You can run your tests, make sure the hotfix is what you want, and merge it back into your master branch to deploy to production. You do this with the git merge command:
git checkout master
git merge hotfix
(Optional : git merge testing)

 However, first you’ll delete the hotfix branch, because you no longer need it — the master branch points at the same place. You can delete it with the -d option to git branch:
git branch -d hotfix

 To see the last commit on each branch, you can run git branch -v:
git branch -v

 Tracking Branches
git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'

 To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
 Now, your local branch sf will automatically push to and pull from origin/serverfix.

 Deleting Remote Branches
git push origin :serverfix

 Rebasing
git checkout experiment
git rebase master